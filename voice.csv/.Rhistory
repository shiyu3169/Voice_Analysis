plot(perf, colorize=T, main="LDA")
unlist(attributes(performance(pred, "auc"))$y.values)
scores <- predict(lda.fit, newdata= valid)$posterior[,2]
pred <- prediction( scores, labels= valid$label )
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=T, main="LDA")
unlist(attributes(performance(pred, "auc"))$y.values)
library(caret)
library(ggplot2)
library(e1071)
control <- trainControl(method="cv", number=12)
metric <- "Accuracy"
model.svm <- train(label~., data=train, method="svmLinear", metric=metric, trControl=control)
model.svm <- train(label~., data=train, method="svmLinear", metric=metric, trControl=control)
data= read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
set.seed(1)
sub <- sample(nrow(data), floor(nrow(data)/2))
train<-data[sub,]
valid<-data[-sub,]
head(train)
library(caret)
library(ggplot2)
library(e1071)
library(MASS)
data= read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
set.seed(1)
sub <- sample(nrow(data), floor(nrow(data)/2))
train<-data[sub,]
valid<-data[-sub,]
head(train)
library(caret)
library(ggplot2)
library(e1071)
library(MASS)
# Linear Kernel
model.svm <- train(label~., data=train, method="svmLinear", metric=metric, trControl=control)
# Linear Kernel
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
# Linear Kernel
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
data= read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
data$chd <- factor(data$chd)
set.seed(1)
sub <- sample(nrow(data), floor(nrow(data)/2))
train<-data[sub,]
valid<-data[-sub,]
head(train)
library(caret)
library(ggplot2)
library(e1071)
library(MASS)
data= read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
data$chd <- factor(data$chd)
set.seed(1)
sub <- sample(nrow(data), floor(nrow(data)/2))
train<-data[sub,]
valid<-data[-sub,]
head(train)
library(caret)
library(ggplot2)
library(e1071)
library(MASS)
# Linear Kernel
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
data= read.table("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data",
sep=",",head=T,row.names=1)
data$chd <- factor(data$chd)
set.seed(1)
sub <- sample(nrow(data), floor(nrow(data)/2))
train<-data[sub,]
valid<-data[-sub,]
head(train)
library(caret)
library(ggplot2)
library(e1071)
library(MASS)
control <- trainControl(method="cv", number=12)
metric <- "Accuracy"
# Linear Kernel
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, train)
confusionMatrix(prediction.svm, train$label)$overall[1]
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$label)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
fitted=attributes(predict(svmfit.opt, valid, decision.values=TRUE))$decision.values
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$label)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
fitted=attributes(predict(svmfit.opt, valid, decision.values=TRUE))$decision.values
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=2, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
fitted=attributes(predict(svmfit.opt, valid, decision.values=TRUE))$decision.values
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# Linear Kernel
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, train)
confusionMatrix(prediction.svm, train$label)$overall[1]
# Linear Kernel
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, train)
confusionMatrix(prediction.svm, train$chd)$overall[1]
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, valid)
confusionMatrix(prediction.svm, valid$chd)$overall[1]
# Radial Kernel
model.svm <- train(chd~., data=train, method="svmRadial", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, train)
confusionMatrix(prediction.svm, train$chd)$overall[1]
model.svm <- train(chd~., data=train, method="svmRadial", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, valid)
confusionMatrix(prediction.svm, valid$chd)$overall[1]
# Linear Kernel
# Train
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, train)
confusionMatrix(prediction.svm, train$chd)$overall[1]
# Valid
model.svm <- train(chd~., data=train, method="svmLinear", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, valid)
confusionMatrix(prediction.svm, valid$chd)$overall[1]
# Radial Kernel
# Train
model.svm <- train(chd~., data=train, method="svmRadial", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, train)
confusionMatrix(prediction.svm, train$chd)$overall[1]
# Valid
model.svm <- train(chd~., data=train, method="svmRadial", metric=metric, trControl=control)
prediction.svm <- predict(model.svm, valid)
confusionMatrix(prediction.svm, valid$chd)$overall[1]
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, train$chd, main="Training Data")
# print out the area under the curve
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.01, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
#train
rocplot(fitted, train$chd, main="Training Data")
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.0001, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
#train
rocplot(fitted, train$chd, main="Training Data")
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.0000001, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
#train
rocplot(fitted, train$chd, main="Training Data")
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.0001, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
#train
rocplot(fitted, train$chd, main="Training Data")
pred = prediction(fitted, train$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
#valid
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.0001, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.001, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=10, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=100, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=1000, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.1, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.01, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.001, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.005, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.02, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
# ROC
#Tainning
library(ROCR)
rocplot=function(pred, truth, ...){
predob = prediction(pred, truth)
pref = performance(predob, "tpr", "fpr")
plot(pref,...)
}
svmfit.opt=svm(chd~., data=train, kernel="radial", gamma=0.01, cost=1, decision.values=T)
fitted=attributes(predict(svmfit.opt, train, decision.values=TRUE))$decision.values
par(mfrow=c(1, 2))
rocplot(fitted, valid$chd, main="Test Data")
pred = prediction(fitted, valid$chd)
unlist(attributes(performance(pred, "auc"))$y.values)
